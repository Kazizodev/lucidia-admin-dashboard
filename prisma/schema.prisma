generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model restaurant {
  id        String   @id @default(uuid())
  name      String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboards billboard[]    @relation("RestaurantToBillboard")
  categories category[]     @relation("RestaurantToCategory")
  products   product[]      @relation("RestaurantToProduct")
  exchange   exchangerate[] @relation("RestaurantToExhange")
}

model billboard {
  id           String   @id @default(uuid())
  restaurantId String
  label        String
  imageUrl     String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  restaurant restaurant @relation("RestaurantToBillboard", fields: [restaurantId], references: [id])

  @@index([restaurantId])
}

model category {
  id           String     @id @default(uuid())
  restaurantId String
  restaurant   restaurant @relation("RestaurantToCategory", fields: [restaurantId], references: [id])
  products     product[]  @relation("CategoryToProduct")
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([restaurantId])
}

model product {
  id           String     @id @default(uuid())
  restaurantId String
  restaurant   restaurant @relation("RestaurantToProduct", fields: [restaurantId], references: [id])
  categoryId   String
  category     category   @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name         String
  price        Decimal
  isFeatured   Boolean    @default(false)
  isArchived   Boolean    @default(false)
  images       image[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([restaurantId])
  @@index([categoryId])
}

model image {
  id        String   @id @default(uuid())
  productId String
  product   product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model exchangerate {
  id           String     @id @default(uuid())
  rate         Decimal
  restaurantId String
  restaurant   restaurant @relation("RestaurantToExhange", fields: [restaurantId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([restaurantId])
}
